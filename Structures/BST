#include <iostream>

struct Node
{
	int data;
	Node* left;
	Node* right;
	Node(int Data)
	{
		data = Data;
		left = nullptr;
		right = nullptr;
	}
};

class BST
{
	Node* root;

public:
	BST()
	{
		root = nullptr;
	}

	void addNode(int data)
	{
		if (root == nullptr)
		{
			root = new Node{ data };
		}
		else
		{
			Node* current = root;
			while (current != nullptr)
			{
				if (current->data == data)
				{
					return;
				}
				else if (current->data < data)
				{
					if (current->right == nullptr)
					{
						current->right = new Node{ data };
						current = nullptr;
					}
					else
					{
						current = current->right;
					}
				}
				else if (current->data > data)
				{
					if (current->left == nullptr)
					{
						current->left = new Node{ data };
						current = nullptr;
					}
					else
					{
						current = current->left;
					}
				}
			}
		}

	}

	Node *findMinimum(Node *root)
	{
		while (root->left!=nullptr)
		{
			root = root->left;
		}
		return root; 
	}

	Node *removeElement(Node *root, int data)
	{
		if (root != nullptr)
		{
			if (root->data < data)
			{
				root->right = removeElement(root->right, data);
			}
			else if (root->data > data)
			{
				root->left = removeElement(root->left, data);
			}
			else
			{
				if (root->right == nullptr)
				{
					Node *tmp = root->left;
					delete root;
					return tmp;
				}
				Node *tmp = findMinimum(root->right);
				root->data = tmp->data;
				root->right = removeElement(root->right, root->data);
			}
		}
		return root;
	}

	void remove(int data)
	{
		removeElement(root, data);
	}



	int findDepthOfElement(int data)
	{
		Node*current = root;
		int position = -1;
		while (current != nullptr)
		{
			if (current->data == data)
			{
				return position + 1;
			}
			else if (current->data < data)
			{
				current = current->right;
				++position;
			}
			else
			{
				current = current->left;
				++position;
			}
		}
		return -1;
	}

	bool isEmpty()
	{
		if (root == nullptr)
		{
			return true;
		}
		return false;
	}

	void printSorted(Node *root)
	{
		if (root == NULL)
		{
			return;
		}
		printSorted(root->left);
		std::cout << root->data << " ";
		printSorted(root->right);
	}

	void print()
	{
		printSorted(root);
	}

};

int main()
{
	BST tree;

	int data;
	std::cin >> data;
	while (data > -1)
	{
		tree.addNode(data);
		std::cin >> data;
	}

	tree.print();

	std::cin >> data;
	while (data > -1)
	{
		tree.remove(data);
		std::cin >> data;
	}

	tree.print();

	return 0;
}
